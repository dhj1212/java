server.port=8088

server.tomcat.max-swallow-size=-1
#server.context-path=/jeecg-boot
server.compression.enabled=true
server.compression.min-response-size=1024
server.compression.mime-types=application/javascript,application/json,application/xml,text/html,text/xml,text/plain,text/css,image/*

server.servlet.session.cookie.http-only=true
server.servlet.session.tracking-modes=cookie
#内嵌Tomcat的Slow HTTP漏洞
#server.tomcat.connection-timeout=500

#开启热部署生效
spring.devtools.restart.enabled=true

#监听目录
spring.devtools.restart.additional-paths=src/main/java

#Spring Boot中的乱码和编码问题  
spring.http.encoding.force=true
#thymeleaf配置
#监听目录默认路径
#spring.thymeleaf.prefix=classpath:/templates/thymeleaf/
spring.thymeleaf.prefix=classpath:/templates/html/
# 后缀
spring.thymeleaf.suffix=.html
# 模板格式
spring.thymeleaf.mode=HTML5
#spring.thymeleaf.mode=HTML
spring.thymeleaf.check-template-location=true
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.content-type=text/html

spring.thymeleaf.enabled=true
#缓存
spring.thymeleaf.cache=false

logging.level.org.thymeleaf= INFO
logging.level.org.springframework.security= INFO

#视图层控制springmvc
#spring.mvc.view.prefix:/WEB-INF/pages/
#spring.mvc.view.suffix:.jsp
#spring.mvc.view.prefix=classpath:/templates/
spring.mvc.view.prefix=/WEB-INF/pages/
spring.mvc.view.suffix=.jsp
spring.mvc.static-path-pattern=/static/**

#freemarker配置
spring.freemarker.allow-request-override=false
#关闭缓存
spring.freemarker.cache=true
spring.freemarker.check-template-location=true
spring.freemarker.charset=UTF-8
spring.freemarker.content-type=text/html
spring.freemarker.expose-request-attributes=false
spring.freemarker.expose-session-attributes=false
spring.freemarker.expose-spring-macro-helpers=false
spring.freemarker.prefix=
spring.freemarker.suffix=.ftl
#排除那个目录的文件不需要restart
spring.devtools.restart.exclude=static/**,public/**

#上传文件
#单个文件大小
spring.servlet.multipart.max-file-size=1024MB
#总文件的大小
spring.servlet.multipart.max-request-size=2048MB
    
#数据库
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
#spring.datasource.driverClassName=oracle.jdbc.OracleDriver
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:oralin
spring.datasource.username=sboot
spring.datasource.password=sboot

#jpa
spring.jpa.database=oracle
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.open-in-view=true
jpa.properties.open-in-view=true
spring.jackson.serialization.indent_output=true
# Hibernate ddl auto (create, create-drop, update)
#spring.jpa.hibernate.ddl-auto = update
# Naming strategy
# spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
#[org.hibernate.cfg.ImprovedNamingStrategy #org.hibernate.cfg.DefaultNamingStrategy]  
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy  
# stripped before adding them to the entity manager
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.Oracle10gDialect


#验证连接的有效性
#spring.datasource.primary.test-while-idle=true
#获取连接时候验证，会影响性能
#spring.datasource.primary.test-on-borrow=false
#在连接归还到连接池时是否测试该连接
#spring.datasource.primary.test-on-return=false
#spring.datasource.primary.validation-query=SELECT 1 FROM DUAL
#空闲连接回收的时间间隔，与test-while-idle一起使用，设置5分钟
#spring.datasource.primary.time-between-eviction-runs-millis=300000
#连接池空闲连接的有效时间 ，设置30分钟
#spring.datasource.primary.min-evictable-idle-time-millis=1800000
#初始化连接大小
#spring.datasource.primary.initial-size=5
#指定连接池中最大的活跃连接数.
#spring.datasource.primary.max-active=50
#指定连接池等待连接返回的最大等待时间，毫秒单位.
#spring.datasource.primary.max-wait=60000
#指定必须保持连接的最小值
#spring.datasource.primary.min-idle=5

#初始化连接大小
spring.datasource.initialSize=5
#最小连接池数量                            
spring.datasource.minIdle=5
#最大连接池数量                                   
spring.datasource.maxActive=20 
#获取连接时最大等待时间，单位毫秒                                 
spring.datasource.maxWait=60000
#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
#配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000  
#测试连接           
spring.datasource.validationQuery=SELECT 1 FROM DUAL
#申请连接的时候检测，建议配置为true，不影响性能，并且保证安全性        
spring.datasource.testWhileIdle=true
#获取连接时执行检测，建议关闭，影响性能                        
spring.datasource.testOnBorrow=false  
#归还连接时执行检测，建议关闭，影响性能                          
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小 PSCache对支持游标的数据库性能提升巨大，oracle建议开启，mysql下建议关闭    
spring.datasource.poolPreparedStatements=true
#开启poolPreparedStatements后生效    
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙  配置扩展插件，常用的插件有=>stat:监控统计  log4j:日志  wall:防御sql注入
spring.datasource.filters=stat,wall,log4j2
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true

spring.jpa.properties.hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext
spring.jpa.properties.hibernate.cache.use_second_level_cache=false;
spring.jpa.properties.hibernate.cache.use_query_cache=false;
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
##开启懒加载
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true

#mybatis-plus
#mybatis-plus.mapper-locations=classpath:/mapper/*Mapper.xml
#mybatis-plus.typeAliasesPackage=com.cn.restyle.entity
#mybatis-plus.mapper-locations=classpath*:com/hpi/**/**.xml,classpath*:mapping/**/**.xml
#mybatis-plus.mapper-locations: classpath*:org/jeecg/modules/**/xml/*Mapper.xml
#mybatis-plus.mapper-locations: classpath*:com/hpi/mapper/xml/*.xml
mybatis-plus.mapper-locations: classpath*:com/hpi/modules/**/xml/*Mapper.xml
#mybatis-plus.type-aliases-package=com.hpi.entity

# 关闭MP3.0自带的banner
mybatis-plus.global-config.banner=false
##主键类型  0:"数据库ID自增",1:"该类型为未设置主键类型", 2:"用户输入ID",3:"全局唯一ID (数字类型唯一ID)", 4:"全局唯一ID UUID",5:"字符串全局唯一ID (idWorker 的字符串表示)";
#主键类型 AUTO:"数据库ID自增" INPUT:"用户输入ID",ID_WORKER:"全局唯一ID (数字类型唯一ID)", UUID:"全局唯一ID UUID";
#mybatis-plus.global-config.db-config.id-type=auto
mybatis-plus.global-config.id-type=0
#字段策略 IGNORED:"忽略判断"  NOT_NULL:"非 NULL 判断")  NOT_EMPTY:"非空判断"
mybatis-plus.global-config.db-config.field-strategy=NOT_EMPTY
#数据库类型
#mybatis-plus.global-config.db-config.db-type=MYSQL
#默认数据库表下划线命名
mybatis-plus.global-config.db-config.table-underline=true
# 这个配置会将执行的sql打印出来，在开发或测试的时候可以用
#log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
# 返回类型为Map,显示null对应的字段
# 如果查询结果中包含空值的列，则 MyBatis 在映射的时候，不会映射这个字段
mybatis-plus.global-config.configuration.call-setters-on-nulls=true
 # 是否开启自动驼峰命名规则映射:从数据库列名到Java属性驼峰命名的类似映射
mybatis-plus.global-config.configuration.map-underscore-to-camel-case=true
# 这个配置会将执行的sql打印出来，在开发或测试的时候可以用
mybatis-plus.global-config.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl

#spring.activiti.database-schema-update=true
#spring.activiti.history-level=full
#spring.activiti.db-history-used= true

# activiti
#1.flase： 默认值。activiti在启动时，会对比数据库表中保存的版本，如果没有表或者版本不匹配，将抛出异常
#2.true： activiti会对数据库中所有表进行更新操作。如果表不存在，则自动创建
#3.create_drop： 在activiti启动时创建表，在关闭时删除表（必须手动关闭引擎，才能删除表）
#4.drop-create： 在activiti启动时删除原来的旧表，然后在创建新表（不需要手动关闭引擎）
#spring.activiti.database-schema-update=true
#spring.activiti.database-schema=true
#检测历史表是否存在
spring.activiti.database-schema-update=true
#spring.activiti.database-schema-update=drop-create
spring.activiti.db-history-used=true
#记录历史等级 可配置的历史级别有none, activity, audit, full
spring.activiti.history-level=full
#校验流程文件，默认校验resources下的processes文件夹里的流程文件
spring.activiti.check-process-definitions=false
#security.basic.enabled=false
#spring.redis.host=127.0.0.1
#Redis服务器连接端口
#spring.redis.port=6379
#Redis服务器连接密码（默认为空）
#spring.redis.password=
#连接池最大连接数（使用负值表示没有限制）
#spring.redis.pool.max-active=8
#连接池最大阻塞等待时间（使用负值表示没有限制）
#spring.redis.pool.max-wait=-1
#连接池中的最大空闲连接
#spring.redis.pool.max-idle=8
#连接池中的最小空闲连接
#spring.redis.pool.min-idle=0
#连接超时时间（毫秒）
#spring.redis.timeout=30000


#Security security.basic.enabled=true 打开，会有基础登录弹窗弹出
#security.basic.enabled=false
#security.user.name=admin
#security.user.password=123

# cas server settings
#cas服务端登录地址
cas.server-url-prefix=http://localhost:8080/cas
#客户端服务器地址
cas.server-login-url=http://localhost:8080/cas/login
#Ticket校验器使用Cas30ProxyReceivingTicketValidationFilter
cas.client-host-url=http://localhost:8088
cas.validation-type=cas
# springboot server settings


#默认是log4j2-spring.xml
logging.config=classpath\:log4j2.xml